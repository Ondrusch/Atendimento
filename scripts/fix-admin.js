const pool = require("../config/database");
const bcrypt = require("bcryptjs");

async function fixAdminUser() {
  try {
    console.log("üîç Diagnosticando problema de login do admin...");

    // 1. Verificar se o usu√°rio existe
    const userCheck = await pool.query(
      "SELECT id, name, email, password, role FROM users WHERE email = 'admin@sistema.com'"
    );

    if (userCheck.rows.length === 0) {
      console.log("‚ùå Usu√°rio admin n√£o encontrado!");
      console.log("üìù Criando usu√°rio admin...");

      const hashedPassword = await bcrypt.hash("admin123", 10);
      await pool.query(
        `INSERT INTO users (name, email, password, role) 
         VALUES ($1, $2, $3, $4)`,
        ["Administrador", "admin@sistema.com", hashedPassword, "admin"]
      );

      console.log("‚úÖ Usu√°rio admin criado com sucesso!");
      console.log("üìß Email: admin@sistema.com");
      console.log("üîë Senha: admin123");
      return;
    }

    const user = userCheck.rows[0];
    console.log("‚úÖ Usu√°rio admin encontrado:");
    console.log(`   ID: ${user.id}`);
    console.log(`   Nome: ${user.name}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Role: ${user.role}`);

    // 2. Testar a senha atual
    console.log("\nüîê Testando senha atual...");
    const isCurrentPasswordValid = await bcrypt.compare(
      "admin123",
      user.password
    );

    if (isCurrentPasswordValid) {
      console.log("‚úÖ Senha atual est√° CORRETA!");
      console.log("üéâ O usu√°rio admin deveria conseguir logar com admin123");

      // Testar a fun√ß√£o de valida√ß√£o
      console.log("\nüß™ Testando fun√ß√£o de valida√ß√£o...");
      const User = require("../models/User");
      const foundUser = await User.findByEmail("admin@sistema.com");

      if (foundUser) {
        const isValid = await User.validatePassword(
          "admin123",
          foundUser.password
        );
        console.log(
          `üîç Resultado da valida√ß√£o: ${isValid ? "V√ÅLIDA" : "INV√ÅLIDA"}`
        );

        if (!isValid) {
          console.log("‚ùå Problema na fun√ß√£o de valida√ß√£o detectado!");
        }
      }
    } else {
      console.log("‚ùå Senha atual est√° INCORRETA!");
      console.log("üîß Corrigindo senha para admin123...");

      const correctHash = await bcrypt.hash("admin123", 10);
      await pool.query("UPDATE users SET password = $1 WHERE email = $2", [
        correctHash,
        "admin@sistema.com",
      ]);

      console.log("‚úÖ Senha corrigida com sucesso!");

      // Verificar novamente
      const verification = await bcrypt.compare("admin123", correctHash);
      console.log(`üîç Verifica√ß√£o: ${verification ? "SUCESSO" : "FALHOU"}`);
    }

    // 3. Verificar estrutura da tabela
    console.log("\nüìã Verificando estrutura da tabela users...");
    const tableInfo = await pool.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `);

    console.log("Colunas da tabela:");
    tableInfo.rows.forEach((col) => {
      console.log(
        `   ${col.column_name}: ${col.data_type} (${
          col.is_nullable === "YES" ? "nullable" : "not null"
        })`
      );
    });

    console.log("\n‚úÖ Diagn√≥stico conclu√≠do!");
    console.log("\nüìù Para testar o login:");
    console.log("   Email: admin@sistema.com");
    console.log("   Senha: admin123");
  } catch (error) {
    console.error("‚ùå Erro durante o diagn√≥stico:", error);
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  fixAdminUser();
}

module.exports = fixAdminUser;
